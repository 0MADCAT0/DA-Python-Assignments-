{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from scipy.stats import iqr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = [0,6,4,1,5,3,4]\n",
    "y = [88,52,64,60,54,78,40]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXAAAAD7CAYAAABzGc+QAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAPp0lEQVR4nO3df2yc9X3A8fenTqoa2ipQnCgJzUKlyJuEBGEntC4a6kap2w013iQmKnWKKrT803V0k7wl+6faH5MyeZq2vypF0MrTWjYGxqB1wo3Cuh9/tMPBVIEGLx2jNHaauD+8lvY0QvbZH34M+eHgO/vOd9/z+yWhx/flzvc5Id568jxP7onMRJJUnnd0egBJ0uoYcEkqlAGXpEIZcEkqlAGXpEIZcEkqVEMBj4gHI+KFiHgxIj5brd0YEcci4nS1vaG9o0qSLrViwCPiVuB3gTuB24B7I2IPcAg4npl7gOPVY0nSOtnUwHN+Afh6Zv4MICL+BfhNYD/woeo5Y8DXgD9+u19000035e7du1c5qiRtTCdOnPh+Zg5cud5IwF8A/iwi3gfUgV8HpoBtmXkWIDPPRsTWlX7R7t27mZqaam5ySdrgIuI7y62vGPDMPBURfw4cA14Dvgm80cQbHwQOAuzatavRl0mSVtDQSczMfDgz78jMu4AfAqeBcxGxHaDanr/Ga49mZi0zawMDV/0JQJK0So1ehbK12u4Cfgt4BHgKOFA95QDwZDsGlCQtr5Fj4ACPV8fALwCfzswfRcQR4NGIeAB4FbivXUNKkq7WUMAz81eWWfsBcHfLJ5IkNaTRPfCOmZieZXRyhrmFOju29DMyNMjw3p2dHkuSOq6rAz4xPcvh8ZPUL1wEYHahzuHxkwBGXNKG19XfhTI6OfNmvJfUL1xkdHKmQxNJUvfo6oDPLdSbWpekjaSrA75jS39T65K0kXR1wEeGBunf3HfZWv/mPkaGBjs0kSR1j64+ibl0otKrUCTpal0dcFiMuMGWpKt19SEUSdK1GXBJKpQBl6RCGXBJKpQBl6RCGXBJKpQBl6RCGXBJKpQBl6RCGXBJKpQBl6RCGXBJKpQBl6RCGXBJKpQBl6RCGXBJKpQBl6RCGXBJKpQBl6RCGXBJKpQBl6RCGXBJKpQBl6RCGXBJKlRDAY+IP4iIFyPihYh4JCLeFRE3RsSxiDhdbW9o97CSpLesGPCI2An8PlDLzFuBPuB+4BBwPDP3AMerx5KkddLoIZRNQH9EbAKuA+aA/cBY9e/HgOHWjydJupYVA56Zs8BfAK8CZ4H/ycyvAtsy82z1nLPA1nYOKkm6XCOHUG5gcW/7FmAHcH1EfLLRN4iIgxExFRFT8/Pzq59UknSZRg6hfBj478ycz8wLwDjwy8C5iNgOUG3PL/fizDyambXMrA0MDLRqbkna8BoJ+KvAL0XEdRERwN3AKeAp4ED1nAPAk+0ZUZK0nE0rPSEzvxERjwHPAW8A08BR4N3AoxHxAIuRv6+dg0qSLrdiwAEy83PA565Y/l8W98YlSR3QUMClXjUxPcvo5AxzC3V2bOlnZGiQ4b07Oz2W1BADrg1rYnqWw+MnqV+4CMDsQp3D4ycBjLiK4HehaMManZx5M95L6hcuMjo506GJpOYYcG1Ycwv1ptalbmPAtWHt2NLf1LrUbQy4NqyRoUH6N/ddtta/uY+RocEOTSQ1x5OY2rCWTlR6FYpKZcC1oQ3v3WmwVSwPoUhSoQy4JBXKgEtSoQy4JBXKgEtSoQy4JBXKgEtSoQy4JBXKgEtSoQy4JBXKgEtSoQy4JBXKgEtSoQy4JBXKgEtSoQy4JBXKgEtSoQy4JBXKgEtSoQy4JBXKgEtSoQy4JBXKgEtSoQy4JBXKgEtSoVYMeEQMRsTzl/zz44j4bETcGBHHIuJ0tb1hPQaWJC1aMeCZOZOZt2fm7cAvAj8DngAOAcczcw9wvHosSVonzR5CuRv4r8z8DrAfGKvWx4DhVg4mSXp7zQb8fuCR6udtmXkWoNpuXe4FEXEwIqYiYmp+fn71k0qSLtNwwCPincDHgX9o5g0y82hm1jKzNjAw0Ox8kqRraGYP/GPAc5l5rnp8LiK2A1Tb860eTpJ0bc0E/BO8dfgE4CngQPXzAeDJVg0lSVpZQwGPiOuAe4DxS5aPAPdExOnq3x1p/XiSpGvZ1MiTMvNnwPuuWPsBi1elSJI6wL+JKUmFMuCSVCgDLkmFMuCSVCgDLkmFMuCSVCgDLkmFMuCSVCgDLkmFMuCSVCgDLkmFMuCSVCgDLkmFMuCSVCgDLkmFMuCSVKiGbuggqftNTM8yOjnD3EKdHVv6GRkaZHjvzk6PpTYy4FIPmJie5fD4SeoXLgIwu1Dn8PhJACPewzyEIvWA0cmZN+O9pH7hIqOTMx2aSOvBgEs9YG6h3tS6eoMBl3rAji39Ta2rNxhwqQeMDA3Sv7nvsrX+zX2MDA12aCKtB09iSj1g6USlV6FsLAZc6hHDe3ca7A3GQyiSVCgDLkmFMuCSVCgDLkmFMuCSVCgDLkmFMuCSVCgDLkmFaijgEbElIh6LiJci4lREfDAiboyIYxFxutre0O5hJUlvaXQP/K+BpzPz54HbgFPAIeB4Zu4BjleP9TYmpmfZd+QZbjn0FfYdeYaJ6dlOjySpYCsGPCLeC9wFPAyQma9n5gKwHxirnjYGDLdryF6w9IX7swt1kre+cN+IS1qtRvbAPwDMA1+MiOmIeCgirge2ZeZZgGq7tY1zFs8v3JfUao0EfBNwB/D5zNwL/JQmDpdExMGImIqIqfn5+VWOWT6/cF9SqzUS8DPAmcz8RvX4MRaDfi4itgNU2/PLvTgzj2ZmLTNrAwMDrZi5SH7hvqRWWzHgmfk94LsRsfTN8HcD3wKeAg5UaweAJ9syYY/wC/cltVqj3wf+GeBLEfFO4GXgUyzG/9GIeAB4FbivPSP2Br9wX1KrRWau25vVarWcmppat/eTpF4QEScys3blun8TU5IKZcAlqVAGXJIKZcAlqVAGXJIKZcAlqVAGXJIKZcAlqVAGXJIKZcAlqVAGXJIKZcAlqVAGXJIKZcAlqVAGXJIKZcAlqVCN3pFHktbNxPSsd69qgAGX1FUmpmc5PH6S+oWLAMwu1Dk8fhLAiF/BQyiSusro5Myb8V5Sv3CR0cmZDk3UvQy4pK4yt1Bvan0jM+CSusqOLf1NrW9kBlxSVxkZGqR/c99la/2b+xgZGuzQRN3Lk5iSusrSiUqvQlmZAZfUdYb37jTYDTDgktRG7bym3YBLUpu0+5p2T2JKUpu0+5p2Ay5JbdLua9oNuCS1SbuvaTfgktQm7b6m3ZOYktQm7b6m3YBLUhu185r2hgIeEa8APwEuAm9kZi0ibgT+HtgNvAL8dmb+qC1TSpKu0swx8F/NzNszs1Y9PgQcz8w9wPHqsSRpnazlJOZ+YKz6eQwYXvs4kqRGNRrwBL4aESci4mC1ti0zzwJU263tGFCStLxGT2Luy8y5iNgKHIuIlxp9gyr4BwF27dq1ihElSctpaA88M+eq7XngCeBO4FxEbAeotuev8dqjmVnLzNrAwEBrppYkrRzwiLg+It6z9DPwEeAF4CngQPW0A8CT7RpSknS1Rg6hbAOeiIil5385M5+OiGeBRyPiAeBV4L72jSlJutKKAc/Ml4Hblln/AXB3O4aSJK3M70KRpEIZcEkqlAGXpEIZcEkqlAGXpEIZcEkqlAGXpEIZcEkqlAGXpEIZcEkqlAGXpEIZcEkqlAGXpEIZcEkqlAGXpEIZcEkqlAGXpEIZcEkqlAGXpEIZcEkqlAGXpEIZcEkqlAGXpEIZcEkqlAGXpEIZcEkqlAGXpEIZcEkqlAGXpEIZcEkqlAGXpEIZcEkqVMMBj4i+iJiOiH+sHt8YEcci4nS1vaF9Y0qSrtTMHviDwKlLHh8CjmfmHuB49VhSh0xMz7LvyDPccugr7DvyDBPTs50eSW3WUMAj4mbgN4CHLlneD4xVP48Bw60dTVKjJqZnOTx+ktmFOgnMLtQ5PH7SiPe4RvfA/wr4I+D/LlnblplnAart1hbPJqlBo5Mz1C9cvGytfuEio5MzHZpI62HFgEfEvcD5zDyxmjeIiIMRMRURU/Pz86v5FZJWMLdQb2pdvaGRPfB9wMcj4hXg74Bfi4i/Bc5FxHaAant+uRdn5tHMrGVmbWBgoEVjS7rUji39Ta2rN6wY8Mw8nJk3Z+Zu4H7gmcz8JPAUcKB62gHgybZNKeltjQwN0r+577K1/s19jAwNdmgirYdNa3jtEeDRiHgAeBW4rzUjSWrW8N6dwOKx8LmFOju29DMyNPjmunpTZOa6vVmtVsupqal1ez9J6gURcSIza1eu+zcxJalQBlySCmXAJalQBlySCmXAJalQ63oVSkTMA99Z5ctvAr7fwnE6yc/SfXrlc4CfpVut5bP8XGZe9Tch1zXgaxERU8tdRlMiP0v36ZXPAX6WbtWOz+IhFEkqlAGXpEKVFPCjnR6ghfws3adXPgf4WbpVyz9LMcfAJUmXK2kPXJJ0iSICHhEfjYiZiPh2RBR7782I+EJEnI+IFzo9y1pExPsj4p8j4lREvBgRD3Z6ptWKiHdFxH9ExDerz/KnnZ5pLa68+XipIuKViDgZEc9HRNHfgBcRWyLisYh4qfp/5oMt+93dfgglIvqA/wTuAc4AzwKfyMxvdXSwVYiIu4DXgL/JzFs7Pc9qVTfw2J6Zz0XEe4ATwHCh/00CuD4zX4uIzcC/Aw9m5tc7PNqqRMQfAjXgvZl5b6fnWa3qBjK1zCz+GvCIGAP+LTMfioh3Atdl5kIrfncJe+B3At/OzJcz83UW7wq0v8MzrUpm/ivww07PsVaZeTYzn6t+/glwCijyi6dz0WvVw83VP929V3MN17j5uDooIt4L3AU8DJCZr7cq3lBGwHcC373k8RkKjUUviojdwF7gG52dZPWqww7Ps3hbwGOZWepnWe7m46VK4KsRcSIiDnZ6mDX4ADAPfLE6tPVQRFzfql9eQsBjmbUi95B6TUS8G3gc+Gxm/rjT86xWZl7MzNuBm4E7I6K4w1trvfl4F9qXmXcAHwM+XR1+LNEm4A7g85m5F/gp0LLzeCUE/Azw/kse3wzMdWgWVarjxY8DX8rM8U7P0wrVH22/Bny0w6OsxrVuPl6kzJyrtueBJ1g8lFqiM8CZS/5U9xiLQW+JEgL+LLAnIm6pTgDcz+INldUh1Ym/h4FTmfmXnZ5nLSJiICK2VD/3Ax8GXursVM17m5uPFycirq9OjlMdbvgIUOSVW5n5PeC7EbF0d+m7gZad7F/LTY3XRWa+ERG/B0wCfcAXMvPFDo+1KhHxCPAh4KaIOAN8LjMf7uxUq7IP+B3gZHXsGOBPMvOfOjjTam0Hxqqrnd4BPJqZRV+C1wO2AU8s7iewCfhyZj7d2ZHW5DPAl6od0JeBT7XqF3f9ZYSSpOWVcAhFkrQMAy5JhTLgklQoAy5JhTLgklQoAy5JhTLgklQoAy5Jhfp/OBGTWSHwpOUAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x,y);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3</td>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>4</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   x   y\n",
       "0  0  88\n",
       "1  6  52\n",
       "2  4  64\n",
       "3  1  60\n",
       "4  5  54\n",
       "5  3  78\n",
       "6  4  40"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.DataFrame(zip(x,y),columns=[\"x\",\"y\"])\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>x</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.673672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>y</th>\n",
       "      <td>-0.673672</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          x         y\n",
       "x  1.000000 -0.673672\n",
       "y -0.673672  1.000000"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1fd3f1bbb80>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.plot.scatter(\"x\",\"y\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'laker': [103, 112, 106, 102, 87, 122, 105, 123, 107, 87],\n",
       " 'clipper': [101, 103, 111, 112, 93, 117, 113, 120, 118, 103]}"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = {\"laker\" : [103,112,106,102,87,122,105,123,107,87],\n",
    "          \"clipper\":[101,103,111,112,93,117,113,120,118,103]}\n",
    "results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "date = [\"July 31, 2020\", \"March 8, 2020\", \"December 26, 2019\", \"October 23, 2019\", \"July 7, 2019\", \"April 6, 2019\", \n",
    "        \"March 5, 2019\",\"February 1, 2019\", \"December 29, 2018\", \"October 7, 2018\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame(results, index = date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>laker</th>\n",
       "      <th>clipper</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>July 31, 2020</th>\n",
       "      <td>103</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>March 8, 2020</th>\n",
       "      <td>112</td>\n",
       "      <td>103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>December 26, 2019</th>\n",
       "      <td>106</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>October 23, 2019</th>\n",
       "      <td>102</td>\n",
       "      <td>112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>July 7, 2019</th>\n",
       "      <td>87</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>April 6, 2019</th>\n",
       "      <td>122</td>\n",
       "      <td>117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>March 5, 2019</th>\n",
       "      <td>105</td>\n",
       "      <td>113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>February 1, 2019</th>\n",
       "      <td>123</td>\n",
       "      <td>120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>December 29, 2018</th>\n",
       "      <td>107</td>\n",
       "      <td>118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>October 7, 2018</th>\n",
       "      <td>87</td>\n",
       "      <td>103</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   laker  clipper\n",
       "July 31, 2020        103      101\n",
       "March 8, 2020        112      103\n",
       "December 26, 2019    106      111\n",
       "October 23, 2019     102      112\n",
       "July 7, 2019          87       93\n",
       "April 6, 2019        122      117\n",
       "March 5, 2019        105      113\n",
       "February 1, 2019     123      120\n",
       "December 29, 2018    107      118\n",
       "October 7, 2018       87      103"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1fd3f22d4f0>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.plot.scatter(\"laker\", \"clipper\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>laker</th>\n",
       "      <th>clipper</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>laker</th>\n",
       "      <td>1.00000</td>\n",
       "      <td>0.74865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>clipper</th>\n",
       "      <td>0.74865</td>\n",
       "      <td>1.00000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           laker  clipper\n",
       "laker    1.00000  0.74865\n",
       "clipper  0.74865  1.00000"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1fd3f21da00>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.boxplot(vert = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.boxplot(results[\"laker\"],vert = False);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.boxplot(results[\"clipper\"],vert = False);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "105.4"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"laker\"].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "109.1"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"clipper\"].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "q1: 102.25\n",
      "q3: 110.75\n",
      "iqr: 8.5\n"
     ]
    }
   ],
   "source": [
    "q75, q50, q25 = np.percentile(df[\"laker\"], [75,50, 25])\n",
    "\n",
    "\n",
    "print(\"q1:\", q25)\n",
    "\n",
    "print(\"q3:\", q75)\n",
    "print(\"iqr:\", iqr(df[\"laker\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "q1: 103.0\n",
      "q2 111.5\n",
      "q3: 116.0\n",
      "iqr: 13.0\n"
     ]
    }
   ],
   "source": [
    "q75,q50, q25 = np.percentile(df[\"clipper\"], [75,50, 25])\n",
    "\n",
    "\n",
    "print(\"q1:\", q25)\n",
    "print(\"q2\", q50)\n",
    "print(\"q3:\", q75)\n",
    "print(\"iqr:\", iqr(df[\"clipper\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>laker</th>\n",
       "      <th>clipper</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>105.400000</td>\n",
       "      <td>109.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>12.139925</td>\n",
       "      <td>8.736259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>87.000000</td>\n",
       "      <td>93.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>102.250000</td>\n",
       "      <td>103.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>105.500000</td>\n",
       "      <td>111.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>110.750000</td>\n",
       "      <td>116.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>123.000000</td>\n",
       "      <td>120.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            laker     clipper\n",
       "count   10.000000   10.000000\n",
       "mean   105.400000  109.100000\n",
       "std     12.139925    8.736259\n",
       "min     87.000000   93.000000\n",
       "25%    102.250000  103.000000\n",
       "50%    105.500000  111.500000\n",
       "75%    110.750000  116.000000\n",
       "max    123.000000  120.000000"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[[\"laker\",\"clipper\"]].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Session 3\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>laker</th>\n",
       "      <th>clipper</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>July 7, 2019</th>\n",
       "      <td>87</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>October 7, 2018</th>\n",
       "      <td>87</td>\n",
       "      <td>103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>October 23, 2019</th>\n",
       "      <td>102</td>\n",
       "      <td>112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>July 31, 2020</th>\n",
       "      <td>103</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>March 5, 2019</th>\n",
       "      <td>105</td>\n",
       "      <td>113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>December 26, 2019</th>\n",
       "      <td>106</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>December 29, 2018</th>\n",
       "      <td>107</td>\n",
       "      <td>118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>March 8, 2020</th>\n",
       "      <td>112</td>\n",
       "      <td>103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>April 6, 2019</th>\n",
       "      <td>122</td>\n",
       "      <td>117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>February 1, 2019</th>\n",
       "      <td>123</td>\n",
       "      <td>120</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   laker  clipper\n",
       "July 7, 2019          87       93\n",
       "October 7, 2018       87      103\n",
       "October 23, 2019     102      112\n",
       "July 31, 2020        103      101\n",
       "March 5, 2019        105      113\n",
       "December 26, 2019    106      111\n",
       "December 29, 2018    107      118\n",
       "March 8, 2020        112      103\n",
       "April 6, 2019        122      117\n",
       "February 1, 2019     123      120"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sort_values(\"laker\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>laker</th>\n",
       "      <th>clipper</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>July 31, 2020</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>March 8, 2020</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>December 26, 2019</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>October 23, 2019</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>July 7, 2019</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>April 6, 2019</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>March 5, 2019</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>February 1, 2019</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>December 29, 2018</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>October 7, 2018</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   laker  clipper\n",
       "July 31, 2020      False    False\n",
       "March 8, 2020      False    False\n",
       "December 26, 2019  False    False\n",
       "October 23, 2019   False    False\n",
       "July 7, 2019        True    False\n",
       "April 6, 2019      False    False\n",
       "March 5, 2019       True    False\n",
       "February 1, 2019   False    False\n",
       "December 29, 2018  False    False\n",
       "October 7, 2018     True    False"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isin([105,87])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "ser1 = df[\"laker\"]\n",
    "ser2 = df[\"clipper\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>July 31, 2020</th>\n",
       "      <th>March 8, 2020</th>\n",
       "      <th>December 26, 2019</th>\n",
       "      <th>October 23, 2019</th>\n",
       "      <th>July 7, 2019</th>\n",
       "      <th>April 6, 2019</th>\n",
       "      <th>March 5, 2019</th>\n",
       "      <th>February 1, 2019</th>\n",
       "      <th>December 29, 2018</th>\n",
       "      <th>October 7, 2018</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>laker</th>\n",
       "      <td>103</td>\n",
       "      <td>112</td>\n",
       "      <td>106</td>\n",
       "      <td>102</td>\n",
       "      <td>87</td>\n",
       "      <td>122</td>\n",
       "      <td>105</td>\n",
       "      <td>123</td>\n",
       "      <td>107</td>\n",
       "      <td>87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>clipper</th>\n",
       "      <td>101</td>\n",
       "      <td>103</td>\n",
       "      <td>111</td>\n",
       "      <td>112</td>\n",
       "      <td>93</td>\n",
       "      <td>117</td>\n",
       "      <td>113</td>\n",
       "      <td>120</td>\n",
       "      <td>118</td>\n",
       "      <td>103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Unnamed 0</th>\n",
       "      <td>204</td>\n",
       "      <td>215</td>\n",
       "      <td>217</td>\n",
       "      <td>214</td>\n",
       "      <td>180</td>\n",
       "      <td>239</td>\n",
       "      <td>218</td>\n",
       "      <td>243</td>\n",
       "      <td>225</td>\n",
       "      <td>190</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           July 31, 2020  March 8, 2020  December 26, 2019  October 23, 2019  \\\n",
       "laker                103            112                106               102   \n",
       "clipper              101            103                111               112   \n",
       "Unnamed 0            204            215                217               214   \n",
       "\n",
       "           July 7, 2019  April 6, 2019  March 5, 2019  February 1, 2019  \\\n",
       "laker                87            122            105               123   \n",
       "clipper              93            117            113               120   \n",
       "Unnamed 0           180            239            218               243   \n",
       "\n",
       "           December 29, 2018  October 7, 2018  \n",
       "laker                    107               87  \n",
       "clipper                  118              103  \n",
       "Unnamed 0                225              190  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tot = ser1 + ser2\n",
    "newdf = pd.DataFrame([ser1,ser2,tot])\n",
    "newdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.boxplot();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['July 31, 2020', 'March 8, 2020', 'December 26, 2019',\n",
       "       'October 23, 2019', 'July 7, 2019', 'April 6, 2019', 'March 5, 2019',\n",
       "       'February 1, 2019', 'December 29, 2018', 'October 7, 2018'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tot.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method Series.items of July 31, 2020        204\n",
       "March 8, 2020        215\n",
       "December 26, 2019    217\n",
       "October 23, 2019     214\n",
       "July 7, 2019         180\n",
       "April 6, 2019        239\n",
       "March 5, 2019        218\n",
       "February 1, 2019     243\n",
       "December 29, 2018    225\n",
       "October 7, 2018      190\n",
       "dtype: int64>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tot.items"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.series.Series"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(ser1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "ser1.reset_index(drop=True, inplace=True)\n",
    "ser2.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    103\n",
       "1    112\n",
       "2    106\n",
       "3    102\n",
       "4     87\n",
       "5    122\n",
       "6    105\n",
       "7    123\n",
       "8    107\n",
       "9     87\n",
       "Name: laker, dtype: int64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ser1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    101\n",
       "1    103\n",
       "2    111\n",
       "3    112\n",
       "4     93\n",
       "5    117\n",
       "6    113\n",
       "7    120\n",
       "8    118\n",
       "9    103\n",
       "Name: clipper, dtype: int64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ser2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function __main__.<lambda>(x, y)>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = lambda x,y: [x,y] if x > 111 or y > 111 else False\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         False\n",
       "1    [112, 103]\n",
       "2         False\n",
       "3    [102, 112]\n",
       "4         False\n",
       "5    [122, 117]\n",
       "6    [105, 113]\n",
       "7    [123, 120]\n",
       "8    [107, 118]\n",
       "9         False\n",
       "dtype: object"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = ser1.combine(ser2, x)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[112, 103]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.iloc[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10,)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('O')"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "s1 = np.random.randint(10,size=5)\n",
    "s2 = np.random.randint(10,size=5)\n",
    "s3 = np.random.randint(10,size=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 4, 0, 8, 4])"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 5, 2, 1, 3])"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 8, 1, 0, 5])"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "mydict = {\"var1\" : s1, \"var2\" : s2, \"var3\" : s3}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = pd.DataFrame(mydict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>var1</th>\n",
       "      <th>var2</th>\n",
       "      <th>var3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   var1  var2  var3\n",
       "0     3     1     2\n",
       "1     4     5     8\n",
       "2     0     2     1\n",
       "3     8     1     0\n",
       "4     4     3     5"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\MADCAT\\\\DA_with_pyhton'"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3 = pd.read_csv(\"ornekcsv.csv\", delimiter = \";\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>78</td>\n",
       "      <td>12</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>78</td>\n",
       "      <td>12</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>78</td>\n",
       "      <td>324</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>88</td>\n",
       "      <td>23</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    a    b    c\n",
       "0  78   12  1.0\n",
       "1  78   12  2.0\n",
       "2  78  324  3.0\n",
       "3   7    2  4.0\n",
       "4  88   23  5.0"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>var1</th>\n",
       "      <th>var2</th>\n",
       "      <th>var3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   var1  var2  var3\n",
       "0     3     1     2\n",
       "1     4     5     8\n",
       "2     0     2     1\n",
       "3     8     1     0\n",
       "4     4     3     5"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>var1</th>\n",
       "      <th>var2</th>\n",
       "      <th>var3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   var1  var2  var3\n",
       "1     4     5     8\n",
       "2     0     2     1"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1[1:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RangeIndex(start=0, stop=5, step=1)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 2, 3, 4]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[i for i in df1.index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1.index = [\"a\",\"b\",\"c\",\"d\",\"e\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>var1</th>\n",
       "      <th>var2</th>\n",
       "      <th>var3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>a</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>b</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>c</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>d</th>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>e</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   var1  var2  var3\n",
       "a     3     1     2\n",
       "b     4     5     8\n",
       "c     0     2     1\n",
       "d     8     1     0\n",
       "e     4     3     5"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>var1</th>\n",
       "      <th>var2</th>\n",
       "      <th>var3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>b</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>c</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>d</th>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   var1  var2  var3\n",
       "b     4     5     8\n",
       "c     0     2     1\n",
       "d     8     1     0"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1[\"b\":\"d\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>78</td>\n",
       "      <td>12</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>78</td>\n",
       "      <td>12</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>78</td>\n",
       "      <td>324</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>88</td>\n",
       "      <td>23</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    a    b    c\n",
       "0  78   12  1.0\n",
       "1  78   12  2.0\n",
       "2  78  324  3.0\n",
       "3   7    2  4.0\n",
       "4  88   23  5.0"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    78\n",
       "1    78\n",
       "2    78\n",
       "3     7\n",
       "4    88\n",
       "Name: a, dtype: int64"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3[\"a\"].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3[\"a\"].ndim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    a\n",
       "0  78\n",
       "1  78\n",
       "2  78\n",
       "3   7\n",
       "4  88"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3[[\"a\"]].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.series.Series"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(df3[\"a\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(df3[[\"a\"]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure()\n",
    "\n",
    "axes1 = fig.add_axes([0.1, 0.1, 0.8, 0.8]) # main axes\n",
    "axes2 = fig.add_axes([0.6, 0.7, 0.3, 0.2]) # inset axes\n",
    "\n",
    "# Larger Figure Axes 1\n",
    "axes1.plot(x, y, 'o')\n",
    "axes1.set_xlabel('X_label_axes2')\n",
    "axes1.set_ylabel('Y_label_axes2')\n",
    "axes1.set_title('Axes 2 Title')\n",
    "\n",
    "# Insert Figure Axes 2\n",
    "axes2.plot(y, x, 'o')\n",
    "axes2.set_xlabel('X_label_axes2')\n",
    "axes2.set_ylabel('Y_label_axes2')\n",
    "axes2.set_title('Axes 2 Title');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(1, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(nrows=1, ncols=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1fd3f8a6670>"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "x = np.linspace(0, 5, 11)\n",
    "fig, axes = plt.subplots()    \n",
    "axes.plot(x, x**2, label=\"square\")\n",
    "axes.plot(x, x**3, label=\"cube\")\n",
    "axes.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(2, 3, figsize=(12, 4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'title')"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "x = np.linspace(0, 5, 11)\n",
    "y = x ** 2\n",
    "fig, axes = plt.subplots(1, 3, figsize=(12, 4))\n",
    "axes[1].plot(x,y)\n",
    "axes[1].set_title(\"title\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'title')"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "x = np.linspace(0, 5, 11)\n",
    "y = x ** 2\n",
    "fig, axes = plt.subplots(2, 2, figsize=(8, 4))\n",
    "axes[0,1].plot(x, y)\n",
    "axes[0,1].set_title(\"title\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1fd3f3f8730>]"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "x = np.linspace(0, 5, 11)\n",
    "y = x ** 2\n",
    "fig, ax = plt.subplots(figsize=(8,4))\n",
    "ax.plot(x, y, color=\"red\", lw=3, ls='-', marker='o', markersize=10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3*x+y =9\n",
    "# x + 2y = 8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = np.array([[3,1], [1,2]])\n",
    "b = np.array([9,8])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[3, 1],\n",
       "       [1, 2]])"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([9, 8])"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# linear algabra"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2., 3.])"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.linalg.solve(a,b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = np.arange(0,10,1)\n",
    "x "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-1.00000000e+00, -8.00000000e-01, -6.00000000e-01, -4.00000000e-01,\n",
       "       -2.00000000e-01, -2.22044605e-16,  2.00000000e-01,  4.00000000e-01,\n",
       "        6.00000000e-01,  8.00000000e-01])"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = np.arange(-1,1,0.2)\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.        ,  0.41666667,  0.83333333,  1.25      ,  1.66666667,\n",
       "        2.08333333,  2.5       ,  2.91666667,  3.33333333,  3.75      ,\n",
       "        4.16666667,  4.58333333,  5.        ,  5.41666667,  5.83333333,\n",
       "        6.25      ,  6.66666667,  7.08333333,  7.5       ,  7.91666667,\n",
       "        8.33333333,  8.75      ,  9.16666667,  9.58333333, 10.        ])"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.linspace(0, 10, 25) # stop dahil oluyor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1.        ,  2.37841423,  5.65685425, 13.45434264, 32.        ])"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.logspace(0,10,10,base = np.e)\n",
    "np.logspace(0,5,5,base = 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.5488135 , 0.71518937, 0.60276338, 0.54488318, 0.4236548 ],\n",
       "       [0.64589411, 0.43758721, 0.891773  , 0.96366276, 0.38344152],\n",
       "       [0.79172504, 0.52889492, 0.56804456, 0.92559664, 0.07103606],\n",
       "       [0.0871293 , 0.0202184 , 0.83261985, 0.77815675, 0.87001215],\n",
       "       [0.97861834, 0.79915856, 0.46147936, 0.78052918, 0.11827443]])"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.seed(0)\n",
    "np.random.rand(5,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.63992102, 0.14335329, 0.94466892, 0.52184832, 0.41466194],\n",
       "       [0.26455561, 0.77423369, 0.45615033, 0.56843395, 0.0187898 ],\n",
       "       [0.6176355 , 0.61209572, 0.616934  , 0.94374808, 0.6818203 ],\n",
       "       [0.3595079 , 0.43703195, 0.6976312 , 0.06022547, 0.66676672],\n",
       "       [0.67063787, 0.21038256, 0.1289263 , 0.31542835, 0.36371077]])"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.rand(5,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.57019677, 0.43860151, 0.98837384, 0.10204481, 0.20887676],\n",
       "       [0.16130952, 0.65310833, 0.2532916 , 0.46631077, 0.24442559],\n",
       "       [0.15896958, 0.11037514, 0.65632959, 0.13818295, 0.19658236],\n",
       "       [0.36872517, 0.82099323, 0.09710128, 0.83794491, 0.09609841],\n",
       "       [0.97645947, 0.4686512 , 0.97676109, 0.60484552, 0.73926358]])"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.rand(5,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.36433431, -0.67877739, -0.35362786],\n",
       "       [-0.74074747, -0.67502183, -0.13278426],\n",
       "       [ 0.61980106,  1.79116846,  0.17100044]])"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.randn(3,3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 0, 0, 0],\n",
       "       [0, 2, 0, 0],\n",
       "       [0, 0, 3, 0],\n",
       "       [0, 0, 0, 4]])"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.diag([1,2,3,4]) # vektörü diagonal matrise çevirir"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 0, 0, 0, 0],\n",
       "       [1, 0, 0, 0, 0],\n",
       "       [0, 2, 0, 0, 0],\n",
       "       [0, 0, 3, 0, 0],\n",
       "       [0, 0, 0, 4, 0]])"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.diag([1,2,3,4], k = -1) # ofset ayarı için(matris boyutuda büyür)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4])"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "B = np.array([ i for i in range(5)])\n",
    "B"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 3, 4])"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "B = np.array(range(5))\n",
    "B"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 2])"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "row_mask = np.array([True,False,True,False,False])\n",
    "B[row_mask]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 4])"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "row_mask = np.array([0,0,0,1,1], dtype =bool) #  dtype girmezsen mask çalışmaz diğer o değerler arraya atanır.\n",
    "B[row_mask]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0. , 0.5, 1. , 1.5, 2. , 2.5, 3. , 3.5, 4. , 4.5, 5. , 5.5, 6. ,\n",
       "       6.5, 7. , 7.5, 8. , 8.5, 9. , 9.5])"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = np.arange(0,10,0.5)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([False, False, False, False, False, False, False, False, False,\n",
       "       False, False,  True,  True,  True,  True, False, False, False,\n",
       "       False, False])"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mask = (x > 5) & (x < 7.5)\n",
    "mask"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([5.5, 6. , 6.5, 7. ])"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x[mask]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([11, 12, 13, 14], dtype=int64),)"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "indices = np.where(mask) # masklara uynan değerlerin indexlerini verir.\n",
    "indices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([5.5, 6. , 6.5, 7. ])"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x[indices]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 2, 3, 4],\n",
       "       [5, 6, 7, 8],\n",
       "       [1, 2, 3, 4],\n",
       "       [5, 6, 7, 8]])"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = np.array([1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8]).reshape(4,4)\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 3, 7])"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "row_index = [1,2,6]\n",
    "a.take(row_index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "which = [1,0,1,0]\n",
    "choices = [[-2,-3,-4,-5], [6,7,8,9]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 6, -3,  8, -5])"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.choose(which,choices) # 1. listenin 1 elemanı, 2.listenin 0 elemanı, 3.listenin 1. elemanı, 4. listenin 1. elemanı"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# matplotlib ders"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "age = [25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45]\n",
    "salary = [38496, 42000, 46752, 49320, 53200,\n",
    "         56000, 62316, 64928, 67317, 68748, 73752]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(age,salary)\n",
    "plt.show()  # jupyter için gerekli değil diğer ideler için lazım"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(age,salary)\n",
    "plt.xlabel(\"age\")\n",
    "plt.ylabel(\"salary\")\n",
    "plt.title(\"Salary by Age\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "salary_2 = [45372, 48876, 53850, 57287, 63016,\n",
    "            65998, 70003, 70000, 71496, 75370, 83640]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(age,salary)\n",
    "plt.plot(age,salary_2)\n",
    "plt.xlabel(\"age\")\n",
    "plt.ylabel(\"salary\")\n",
    "plt.title(\"Salary by Age\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(age,salary, label=\"salary\") \n",
    "plt.plot(age,salary_2, label=\"salary2\")\n",
    "plt.xlabel(\"age\")\n",
    "plt.ylabel(\"salary\")\n",
    "plt.title(\"Salary by Age\")\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.subplot(2,1,1) # 2 satır 1 sütun figürün  1. tablosu\n",
    "plt.plot(age,salary, \"r\")\n",
    "plt.subplot(2,1,2)\n",
    "plt.plot(age,salary_2, \"b\")\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.subplot(1,2,1) # 1 satır 2 sütun figürün  1. tablosu\n",
    "plt.plot(age,salary, \"r\")\n",
    "plt.subplot(1,2,2)\n",
    "plt.plot(age,salary_2, \"b\")\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1fd3fab9b50>]"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(salary) # indexleyerek değerleri çizer "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>salary</th>\n",
       "      <th>salary_2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>25</td>\n",
       "      <td>38496</td>\n",
       "      <td>45372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>27</td>\n",
       "      <td>42000</td>\n",
       "      <td>48876</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>29</td>\n",
       "      <td>46752</td>\n",
       "      <td>53850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>31</td>\n",
       "      <td>49320</td>\n",
       "      <td>57287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>33</td>\n",
       "      <td>53200</td>\n",
       "      <td>63016</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  salary  salary_2\n",
       "0   25   38496     45372\n",
       "1   27   42000     48876\n",
       "2   29   46752     53850\n",
       "3   31   49320     57287\n",
       "4   33   53200     63016"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.DataFrame(list(zip(age, salary, salary_2)), columns =['age', 'salary', 'salary_2'])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     38496\n",
       "1     42000\n",
       "2     46752\n",
       "3     49320\n",
       "4     53200\n",
       "5     56000\n",
       "6     62316\n",
       "7     64928\n",
       "8     67317\n",
       "9     68748\n",
       "10    73752\n",
       "Name: salary, dtype: int64"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.salary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1fd3f1d54f0>]"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(df.salary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1fd3f7d5790>]"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(df[\"age\"], df[\"salary\"])  # important"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# OOP figür ve axes yapma"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'salary by age2')"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure()\n",
    "ax1 = fig.add_axes([0,0,1,1])\n",
    "ax2 = fig.add_axes([.2,.5,.2,.3])\n",
    "\n",
    "ax1.plot(age,salary,\"r--\")\n",
    "ax1.set_xlabel(\"age\")\n",
    "ax1.set_ylabel(\"salary\")\n",
    "ax1.set_title(\"salary by age\")\n",
    "\n",
    "ax2.plot(age,salary_2,\"b--\")\n",
    "ax2.set_xlabel(\"age\")\n",
    "ax2.set_ylabel(\"salary2\")\n",
    "ax2.set_title(\"salary by age2\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# OOP SUBPLOT "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Salary by age')"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig , ax = plt.subplots()\n",
    "ax.plot(age, salary, \"ro\")\n",
    "ax.set_xlabel(\"Age\")\n",
    "ax.set_ylabel(\"Salary\")\n",
    "ax.set_title(\"Salary by age\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig , ax = plt.subplots(nrows=2,ncols=1)\n",
    "ax[0].plot(age, salary,\"r\")\n",
    "ax[0].set_xlabel(\"Age\")\n",
    "ax[0].set_ylabel(\"Salary\")\n",
    "ax[0].set_title(\"First Plot\")\n",
    "\n",
    "ax[1].plot(age, salary_2, \"g-o\")\n",
    "ax[1].set_xlabel(\"Age\")\n",
    "ax[1].set_ylabel(\"Salary\")\n",
    "ax[1].set_title(\"Second Plot\")\n",
    "plt.tight_layout()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(2,2)\n",
    "ax[0,0].plot(age,salary, \"r\")\n",
    "ax[0,0].set_title(\"salary1 by age\")\n",
    "ax[0,1].plot(age, salary_2)\n",
    "ax[0,1].set_title(\"salary2 by age\")\n",
    "ax[1,0].plot(age,salary, \"g\")\n",
    "ax[1,0].set_title(\"salary3 by age\")\n",
    "ax[1,1].plot(age, salary_2, \"y\")\n",
    "ax[1,1].set_title(\"salary4 by age\")\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pandas Session-4 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3[\"new\"] = df3[\"a\"]+df3[\"b\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3[\"new2\"] = df3[\"a\"]+df3[\"c\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "      <th>new</th>\n",
       "      <th>new2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>78</td>\n",
       "      <td>12</td>\n",
       "      <td>1.0</td>\n",
       "      <td>90</td>\n",
       "      <td>79.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>78</td>\n",
       "      <td>12</td>\n",
       "      <td>2.0</td>\n",
       "      <td>90</td>\n",
       "      <td>80.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>78</td>\n",
       "      <td>324</td>\n",
       "      <td>3.0</td>\n",
       "      <td>402</td>\n",
       "      <td>81.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>4.0</td>\n",
       "      <td>9</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>88</td>\n",
       "      <td>23</td>\n",
       "      <td>5.0</td>\n",
       "      <td>111</td>\n",
       "      <td>93.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>56</td>\n",
       "      <td>11</td>\n",
       "      <td>6.0</td>\n",
       "      <td>67</td>\n",
       "      <td>62.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>12</td>\n",
       "      <td>7.0</td>\n",
       "      <td>19</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>56</td>\n",
       "      <td>21</td>\n",
       "      <td>7.0</td>\n",
       "      <td>77</td>\n",
       "      <td>63.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>346</td>\n",
       "      <td>2</td>\n",
       "      <td>8.0</td>\n",
       "      <td>348</td>\n",
       "      <td>354.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>8.0</td>\n",
       "      <td>6</td>\n",
       "      <td>13.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>456</td>\n",
       "      <td>21</td>\n",
       "      <td>8.0</td>\n",
       "      <td>477</td>\n",
       "      <td>464.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>88.0</td>\n",
       "      <td>15</td>\n",
       "      <td>91.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      a    b     c  new   new2\n",
       "0    78   12   1.0   90   79.0\n",
       "1    78   12   2.0   90   80.0\n",
       "2    78  324   3.0  402   81.0\n",
       "3     7    2   4.0    9   11.0\n",
       "4    88   23   5.0  111   93.0\n",
       "5     6    2   NaN    8    NaN\n",
       "6    56   11   6.0   67   62.0\n",
       "7     7   12   7.0   19   14.0\n",
       "8    56   21   7.0   77   63.0\n",
       "9   346    2   8.0  348  354.0\n",
       "10    5    1   8.0    6   13.0\n",
       "11  456   21   8.0  477  464.0\n",
       "12    3   12  88.0   15   91.0"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "df3.drop([\"new\",\"new2\"], axis=1 ,inplace= True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>78</td>\n",
       "      <td>12</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>78</td>\n",
       "      <td>12</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>78</td>\n",
       "      <td>324</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>88</td>\n",
       "      <td>23</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>56</td>\n",
       "      <td>11</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>12</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>56</td>\n",
       "      <td>21</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>346</td>\n",
       "      <td>2</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>456</td>\n",
       "      <td>21</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>88.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      a    b     c\n",
       "0    78   12   1.0\n",
       "1    78   12   2.0\n",
       "2    78  324   3.0\n",
       "3     7    2   4.0\n",
       "4    88   23   5.0\n",
       "5     6    2   NaN\n",
       "6    56   11   6.0\n",
       "7     7   12   7.0\n",
       "8    56   21   7.0\n",
       "9   346    2   8.0\n",
       "10    5    1   8.0\n",
       "11  456   21   8.0\n",
       "12    3   12  88.0"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.loc[1,\"c\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2    324\n",
       "3      2\n",
       "4     23\n",
       "5      2\n",
       "Name: b, dtype: int64"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.loc[2:5,\"b\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9    346\n",
       "Name: a, dtype: int64"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.loc[((df3[\"a\"] > 40 ) & (df3[\"b\"] < 10)), \"a\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>var1</th>\n",
       "      <th>var2</th>\n",
       "      <th>var3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10</td>\n",
       "      <td>27</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>11</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>20</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>23</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>7</td>\n",
       "      <td>20</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>11</td>\n",
       "      <td>20</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>29</td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>25</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   var1  var2  var3\n",
       "0    10    27     2\n",
       "1     5    11    23\n",
       "2    12     9    12\n",
       "3     3    20    17\n",
       "4     1    23     1\n",
       "5     7    20    15\n",
       "6    11    20    25\n",
       "7    29     9    14\n",
       "8    25     3     4\n",
       "9     3    12    14"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m = np.random.randint(1,30, size = (10,3))\n",
    "df4 = pd.DataFrame(m, columns = [\"var1\",\"var2\",\"var3\"])\n",
    "df4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "var1     5\n",
       "var2    11\n",
       "var3    23\n",
       "Name: 1, dtype: int32"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4.loc[1] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "var1     5\n",
       "var2    11\n",
       "var3    23\n",
       "Name: 1, dtype: int32"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4.iloc[1]  # default indexleme olduğundan yukarısı ile aynı oluyor."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>var1</th>\n",
       "      <th>var2</th>\n",
       "      <th>var3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>11</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>20</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>23</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   var1  var2  var3\n",
       "1     5    11    23\n",
       "2    12     9    12\n",
       "3     3    20    17\n",
       "4     1    23     1"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4.loc[1:4]  # label ile çalışır  4 dahil olur"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>var1</th>\n",
       "      <th>var2</th>\n",
       "      <th>var3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>11</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>20</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   var1  var2  var3\n",
       "1     5    11    23\n",
       "2    12     9    12\n",
       "3     3    20    17"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4.iloc[1:4] # index ile çalışır normal slicing gibi çalışır  4'e kadar alır"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4.index = \"a b c d e f g h i j\".split()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>var1</th>\n",
       "      <th>var2</th>\n",
       "      <th>var3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>a</th>\n",
       "      <td>10</td>\n",
       "      <td>27</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>b</th>\n",
       "      <td>5</td>\n",
       "      <td>11</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>c</th>\n",
       "      <td>12</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>d</th>\n",
       "      <td>3</td>\n",
       "      <td>20</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>e</th>\n",
       "      <td>1</td>\n",
       "      <td>23</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>f</th>\n",
       "      <td>7</td>\n",
       "      <td>20</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>g</th>\n",
       "      <td>11</td>\n",
       "      <td>20</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>h</th>\n",
       "      <td>29</td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>i</th>\n",
       "      <td>25</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>j</th>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   var1  var2  var3\n",
       "a    10    27     2\n",
       "b     5    11    23\n",
       "c    12     9    12\n",
       "d     3    20    17\n",
       "e     1    23     1\n",
       "f     7    20    15\n",
       "g    11    20    25\n",
       "h    29     9    14\n",
       "i    25     3     4\n",
       "j     3    12    14"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>var1</th>\n",
       "      <th>var2</th>\n",
       "      <th>var3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>a</th>\n",
       "      <td>10</td>\n",
       "      <td>27</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>b</th>\n",
       "      <td>5</td>\n",
       "      <td>11</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>c</th>\n",
       "      <td>12</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>d</th>\n",
       "      <td>3</td>\n",
       "      <td>20</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>e</th>\n",
       "      <td>1</td>\n",
       "      <td>23</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>f</th>\n",
       "      <td>7</td>\n",
       "      <td>20</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>g</th>\n",
       "      <td>11</td>\n",
       "      <td>20</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>h</th>\n",
       "      <td>29</td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>i</th>\n",
       "      <td>25</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>j</th>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   var1  var2  var3\n",
       "a    10    27     2\n",
       "b     5    11    23\n",
       "c    12     9    12\n",
       "d     3    20    17\n",
       "e     1    23     1\n",
       "f     7    20    15\n",
       "g    11    20    25\n",
       "h    29     9    14\n",
       "i    25     3     4\n",
       "j     3    12    14"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4.loc[1:4]  # hata verir"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>var1</th>\n",
       "      <th>var2</th>\n",
       "      <th>var3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>a</th>\n",
       "      <td>10</td>\n",
       "      <td>27</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>b</th>\n",
       "      <td>5</td>\n",
       "      <td>11</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>c</th>\n",
       "      <td>12</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>d</th>\n",
       "      <td>3</td>\n",
       "      <td>20</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   var1  var2  var3\n",
       "a    10    27     2\n",
       "b     5    11    23\n",
       "c    12     9    12\n",
       "d     3    20    17"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4.loc[\"a\":\"d\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>var1</th>\n",
       "      <th>var2</th>\n",
       "      <th>var3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>a</th>\n",
       "      <td>10</td>\n",
       "      <td>27</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>b</th>\n",
       "      <td>5</td>\n",
       "      <td>11</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>c</th>\n",
       "      <td>12</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>d</th>\n",
       "      <td>3</td>\n",
       "      <td>20</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   var1  var2  var3\n",
       "a    10    27     2\n",
       "b     5    11    23\n",
       "c    12     9    12\n",
       "d     3    20    17"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4.iloc[:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>var2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>b</th>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>c</th>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>d</th>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>e</th>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   var2\n",
       "b    11\n",
       "c     9\n",
       "d    20\n",
       "e    23"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4.loc[\"b\":\"e\"][[ \"var2\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>var2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>b</th>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>c</th>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>d</th>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>e</th>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   var2\n",
       "b    11\n",
       "c     9\n",
       "d    20\n",
       "e    23"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4.loc[\"b\":\"e\",[\"var2\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(df4[[\"var1\"]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.series.Series"
      ]
     },
     "execution_count": 186,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(df4[\"var1\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>var1</th>\n",
       "      <th>var2</th>\n",
       "      <th>var3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>a</th>\n",
       "      <td>10</td>\n",
       "      <td>27</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>b</th>\n",
       "      <td>5</td>\n",
       "      <td>11</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>c</th>\n",
       "      <td>12</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>d</th>\n",
       "      <td>3</td>\n",
       "      <td>20</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>e</th>\n",
       "      <td>1</td>\n",
       "      <td>23</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>f</th>\n",
       "      <td>7</td>\n",
       "      <td>20</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>g</th>\n",
       "      <td>11</td>\n",
       "      <td>20</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>h</th>\n",
       "      <td>29</td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>i</th>\n",
       "      <td>25</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>j</th>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   var1  var2  var3\n",
       "a    10    27     2\n",
       "b     5    11    23\n",
       "c    12     9    12\n",
       "d     3    20    17\n",
       "e     1    23     1\n",
       "f     7    20    15\n",
       "g    11    20    25\n",
       "h    29     9    14\n",
       "i    25     3     4\n",
       "j     3    12    14"
      ]
     },
     "execution_count": 188,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4.loc[\"c\", \"var3\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>78</td>\n",
       "      <td>12</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>78</td>\n",
       "      <td>12</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>78</td>\n",
       "      <td>324</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>88</td>\n",
       "      <td>23</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>56</td>\n",
       "      <td>11</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>12</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>56</td>\n",
       "      <td>21</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>346</td>\n",
       "      <td>2</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>456</td>\n",
       "      <td>21</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>88.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      a    b     c\n",
       "0    78   12   1.0\n",
       "1    78   12   2.0\n",
       "2    78  324   3.0\n",
       "3     7    2   4.0\n",
       "4    88   23   5.0\n",
       "5     6    2   NaN\n",
       "6    56   11   6.0\n",
       "7     7   12   7.0\n",
       "8    56   21   7.0\n",
       "9   346    2   8.0\n",
       "10    5    1   8.0\n",
       "11  456   21   8.0\n",
       "12    3   12  88.0"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       a     b      c\n",
       "0   True  True   True\n",
       "1   True  True   True\n",
       "2   True  True   True\n",
       "3   True  True   True\n",
       "4   True  True   True\n",
       "5   True  True  False\n",
       "6   True  True   True\n",
       "7   True  True   True\n",
       "8   True  True   True\n",
       "9   True  True   True\n",
       "10  True  True   True\n",
       "11  True  True   True\n",
       "12  True  True   True"
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3 > 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>78</td>\n",
       "      <td>12</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>78</td>\n",
       "      <td>12</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>78</td>\n",
       "      <td>324</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>88</td>\n",
       "      <td>23</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>56</td>\n",
       "      <td>11</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>12</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>56</td>\n",
       "      <td>21</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>346</td>\n",
       "      <td>2</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>456</td>\n",
       "      <td>21</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>3</td>\n",
       "      <td>12</td>\n",
       "      <td>88.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      a    b     c\n",
       "0    78   12   1.0\n",
       "1    78   12   2.0\n",
       "2    78  324   3.0\n",
       "3     7    2   4.0\n",
       "4    88   23   5.0\n",
       "5     6    2   NaN\n",
       "6    56   11   6.0\n",
       "7     7   12   7.0\n",
       "8    56   21   7.0\n",
       "9   346    2   8.0\n",
       "10    5    1   8.0\n",
       "11  456   21   8.0\n",
       "12    3   12  88.0"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3[df3 > 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      True\n",
       "1      True\n",
       "2      True\n",
       "3      True\n",
       "4      True\n",
       "5      True\n",
       "6      True\n",
       "7      True\n",
       "8      True\n",
       "9      True\n",
       "10    False\n",
       "11     True\n",
       "12    False\n",
       "Name: a, dtype: bool"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list1 = df3[\"a\"] > 5\n",
    "list1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>78</td>\n",
       "      <td>12</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>78</td>\n",
       "      <td>12</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>78</td>\n",
       "      <td>324</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>88</td>\n",
       "      <td>23</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>56</td>\n",
       "      <td>11</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>12</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>56</td>\n",
       "      <td>21</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>346</td>\n",
       "      <td>2</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>456</td>\n",
       "      <td>21</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      a    b    c\n",
       "0    78   12  1.0\n",
       "1    78   12  2.0\n",
       "2    78  324  3.0\n",
       "3     7    2  4.0\n",
       "4    88   23  5.0\n",
       "5     6    2  NaN\n",
       "6    56   11  6.0\n",
       "7     7   12  7.0\n",
       "8    56   21  7.0\n",
       "9   346    2  8.0\n",
       "11  456   21  8.0"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3[df3[\"a\"] > 5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>78</td>\n",
       "      <td>12</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>78</td>\n",
       "      <td>12</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>78</td>\n",
       "      <td>324</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>88</td>\n",
       "      <td>23</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>56</td>\n",
       "      <td>11</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>12</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>56</td>\n",
       "      <td>21</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>346</td>\n",
       "      <td>2</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>456</td>\n",
       "      <td>21</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      a    b    c\n",
       "0    78   12  1.0\n",
       "1    78   12  2.0\n",
       "2    78  324  3.0\n",
       "3     7    2  4.0\n",
       "4    88   23  5.0\n",
       "5     6    2  NaN\n",
       "6    56   11  6.0\n",
       "7     7   12  7.0\n",
       "8    56   21  7.0\n",
       "9   346    2  8.0\n",
       "11  456   21  8.0"
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3[list1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
